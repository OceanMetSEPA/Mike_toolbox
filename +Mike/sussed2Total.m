function op=sussed2Total(dfsu,cellArea,varargin)
% Calculate total mass from suspended and sedimented proportions.
% (MIKE's total output appears to exclude material in cells which dry out,
% leading to missing mass).
%
% INPUTS:
% dfsu : struct containing suspended, sedimented and total mass for each
%        modelled class (as returned by Mike.readDfsuFile)
% cellArea : area of each cell in m2, or mesh struct containing this field
%        (as generated by mesh2MeshStruct.m)
%
% Optional input:
% plotit - plot contributions for each class
% remove - fields of input struct to remove
%
% OUTPUT:
% dfsu with additional 'sussedsum' fields [µg]
%
% NB:
% sus & total are have units [µg/m3]
% sed has units [g/m2] !!!! not µg

options=struct;
options.plotit=false;
options.remove=[];
options=checkArguments(options,varargin);

if isstruct(cellArea)
    try
        cellArea=cellArea.cellArea;
    catch err
        disp(err)
        error('Please pass struct containing cellArea field')
    end
end
if ~isfield(dfsu,'totalWaterDepth')
    try
        dfsu.totalWaterDepth=dfsu.stillWaterDepth+dfsu.surfaceElevation;
    catch err
        disp(err)
        error('Couldn''t determine total water depth from dfsu struct')
    end
end
cellVolume=cellArea.*dfsu.totalWaterDepth;

fn=fieldnames(dfsu);
susFields=stringFinder(fn,'suspended');
sedFields=stringFinder(fn,'sedimented');
%totFields=stringFinder(fn,'total');

Nsus=length(susFields);
Nsed=length(sedFields);
if Nsus==0
    error('No suspended fields in input!')
end
if Nsed==0
    error('No sedimented fields in input!')
end
if Nsus~=Nsed
    error('Mismatch between number of suspended/sedimented fields!')
end

op=dfsu;

Nf=length(susFields);
t=dfsu.dateTime;

if options.plotit
    cm=rainbow(4);
    h=nan(4,1);
end

for i=1:Nf
    susField=susFields{i};
    sedField=sedFields{i};
    %    totField=totFields{i};
    %    fprintf('%d of %d: Combining ''%s'' and ''%s''\n',i,Nf,susField,sedField)
    susLoad=dfsu.(susField).*cellVolume; % µg
    sedLoad=dfsu.(sedField).*cellArea*1e6; % µg
    %    tot=dfsu.(totField).*cellVolume;
    sussedsum=susLoad+sedLoad;
    fn=strrep(susField,'suspended','sussedsum');
    if options.plotit
        prepareFigure('title',fn)
        h(1)=plot(t,sum(susLoad),'color',cm(1,:),'displayname','sus','linewidth',4);
        h(2)=plot(t,sum(sedLoad),'color',cm(2,:),'displayname','sed','linewidth',3);
        h(3)=plot(t,sum(sussedsum),'color',cm(3,:),'displayname','sussed','linewidth',2);
        %        h(4)=plot(t,sum(tot),'color',cm(4,:),'displayname','tot','linewidth',1);
        legend(h(~isnan(h)))
        datetimeAxis
    end
    op.(fn)=sussedsum;
end

if ~isempty(options.remove)
    fn=fieldnames(op);
    k=contains(fn,options.remove);
    fn2Remove=fn(k);
    if ~isempty(fn2Remove)
        op=rmfield(op,fn2Remove);
    end
end
return
